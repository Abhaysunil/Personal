%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 885
%%HiResBoundingBox: 0 0 2371.9199 884.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 884.88 re
W
q
[0.24 0 0 -0.24 0 884.88] cm
q
0 0 9883.333 3687.1111 re
W*
q
[3.125054 0 0 3.125024 0.0169105 0] cm
0 0 3162.6016 1180.86633 re
f
Q
q
[6.531924 0 0 6.531863 170.60178 171.98106] cm
q
494.98499 12.567 m
16.781 12.567 l
14.572001 12.567 12.781 14.358 12.781 16.567001 c
12.781 377.46301 l
12.781 379.67203 14.572001 381.46301 16.781 381.46301 c
138.229004 381.46301 l
138.283997 381.46301 138.335007 381.44901 138.389999 381.44601 c
140.673004 385.70502 143.188004 389.88202 145.932007 393.95001 c
118.046005 432.02502 l
116.884003 433.61102 117.047005 435.80502 118.430008 437.20303 c
136.476013 455.43204 l
137.881012 456.84903 140.114014 457.01703 141.712006 455.82303 c
179.311 427.73804 l
194.68201 438.68704 213.00301 446.33203 232.638 449.98703 c
239.326 496.30402 l
239.61 498.27301 241.297 499.733 243.285 499.733 c
269.008 499.733 l
270.995 499.733 272.68201 498.27399 272.96701 496.30701 c
279.68301 449.987 l
299.14502 446.36499 316.86801 438.89301 332.45001 427.741 c
370.02402 455.82199 l
371.62302 457.017 373.85602 456.85001 375.26001 455.43198 c
393.315 437.20297 l
394.69901 435.80698 394.862 433.61197 393.70099 432.02597 c
365.87198 393.99896 l
368.44098 390.32895 370.82098 386.49295 373.01498 382.52295 c
495.02298 381.46194 l
497.21799 381.44196 498.98798 379.65695 498.98798 377.46194 c
498.98798 16.566999 l
498.98499 14.358 497.194 12.567 494.98499 12.567 c
h
490.98499 20.566999 m
490.98499 89.982002 l
205.076 89.982002 l
170.524 67.391006 l
169.873 66.966003 169.112 66.739006 168.33501 66.739006 c
20.781 66.739006 l
20.781 20.566999 l
490.98499 20.566999 l
h
357.702 396.384 m
385.228 433.99799 l
372.02399 447.32999 l
334.86499 419.55899 l
333.44299 418.496 331.48798 418.49799 330.06799 419.565 c
314.19199 431.491 295.828 439.242 275.487 442.60101 c
273.767 442.884 272.42899 444.24802 272.17899 445.97302 c
265.54398 491.73203 l
246.74698 491.73203 l
240.13998 445.97601 l
239.89099 444.25 238.55298 442.88501 236.83298 442.60101 c
216.31998 439.21301 197.24997 431.24701 181.68597 419.56403 c
180.26598 418.49802 178.31198 418.49603 176.89098 419.55801 c
139.711975 447.32901 l
126.514977 433.99802 l
154.06398 396.38403 l
155.077988 395.00003 155.095978 393.12305 154.108978 391.72003 c
142.151978 374.71802 134.431976 355.65002 131.782974 336.57504 c
131.539978 334.82904 130.183975 333.44705 128.441971 333.17404 c
82.59597 325.96805 l
82.59597 320.68906 l
177.03296 320.68906 l
178.02696 340.19107 186.26895 358.67206 200.50397 373.11005 c
215.29097 388.03503 235.05296 396.25406 256.15598 396.25305 c
256.16199 396.25305 256.17099 396.25305 256.17697 396.25305 c
277.27197 396.24704 297.02197 388.02805 311.79095 373.10605 c
325.72095 359.00504 333.78296 340.52106 334.74097 320.69006 c
429.71097 320.69006 l
429.71097 325.96808 l
383.84698 333.17508 l
382.14297 333.44308 380.80197 334.77307 380.52197 336.47507 c
377.15497 356.87308 369.26596 375.95407 357.70898 391.65005 c
356.673 393.05701 356.67001 394.974 357.702 396.384 c
h
326.72198 320.689 m
325.77298 338.39801 318.53998 354.88901 306.103 367.48099 c
292.85001 380.871 275.12 388.24799 256.17599 388.25198 c
256.16901 388.25198 256.164 388.25198 256.15698 388.25198 c
237.20598 388.25198 219.45999 380.87497 206.19398 367.48499 c
193.45598 354.56497 186.04399 338.077 185.05399 320.68799 c
326.72198 320.68799 l
326.72198 320.689 l
h
377.10101 374.487 m
382.052 363.89001 385.71301 352.487 387.914 340.633 c
434.33301 333.33899 l
436.27802 333.03299 437.71201 331.358 437.71201 329.388 c
437.71201 320.68701 l
468.73999 320.68701 l
470.94901 320.68701 472.73999 318.89603 472.73999 316.68701 c
472.73999 314.478 470.94901 312.68701 468.73999 312.68701 c
43.028 312.68701 l
40.819 312.68701 39.028 314.478 39.028 316.68701 c
39.028 318.89603 40.819 320.68701 43.028 320.68701 c
74.596001 320.68701 l
74.596001 329.388 l
74.596001 331.358 76.029999 333.034 77.974998 333.33899 c
124.306 340.62198 l
126.133003 351.73599 129.565994 362.79999 134.438004 373.46198 c
20.781 373.46198 l
20.781 74.738998 l
167.144012 74.738998 l
201.69601 97.330002 l
202.34702 97.755005 203.10802 97.982002 203.88501 97.982002 c
490.98602 97.982002 l
490.98602 373.49701 l
377.10101 374.487 l
h
W
[486.206973 0 0 487.166027 12.780999 12.566998] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
0 1 0 axialSH
Q
q
450.129 69.750999 m
458.366 69.750999 465.06699 62.998001 465.06699 54.696999 c
465.06699 46.410999 458.366 39.669998 450.129 39.669998 c
441.88599 39.669998 435.17999 46.410999 435.17999 54.696999 c
435.17999 62.998001 441.88599 69.750999 450.129 69.750999 c
h
450.129 47.669998 m
453.95499 47.669998 457.06699 50.821999 457.06699 54.696999 c
457.06699 58.586998 453.95499 61.750999 450.129 61.750999 c
446.297 61.750999 443.17999 58.586998 443.17999 54.696999 c
443.17999 50.821999 446.297 47.669998 450.129 47.669998 c
h
W
[29.886993 0 0 30.081002 435.179973 39.669979] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0.000001 def
/yMin 0.000001 def
/xMax 1.000001 def
/yMax 1.000001 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
0.000001 1.000001 0 axialSH
Q
q
411.819 69.750999 m
420.50699 69.750999 427.314 63.139 427.314 54.696999 c
427.314 46.269997 420.50699 39.669998 411.819 39.669998 c
403.582 39.669998 396.88 46.410999 396.88 54.696999 c
396.88 62.998001 403.582 69.750999 411.819 69.750999 c
h
411.819 47.669998 m
416.022 47.669998 419.314 50.756996 419.314 54.696999 c
419.314 58.717999 416.091 61.750999 411.819 61.750999 c
407.99301 61.750999 404.88 58.586998 404.88 54.696999 c
404.88 50.888 408.05801 47.669998 411.819 47.669998 c
h
W
[30.433989 0 0 30.081002 396.879976 39.669979] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0.000001 def
/yMin 0.000001 def
/xMax 1.000001 def
/yMax 1.000001 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc2_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc2_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc2_0 } {
0.5 sub 2 mul 0 add xpdfFunc2_1
} ifelse
}
def
0.000001 1.000001 0 axialSH
Q
q
365.853 186.94099 m
472.01599 186.94099 l
474.22501 186.94099 476.01599 185.14999 476.01599 182.94099 c
476.01599 148.664993 l
476.01599 146.455994 474.22501 144.664993 472.01599 144.664993 c
365.853 144.664993 l
363.64398 144.664993 361.853 146.455994 361.853 148.664993 c
361.853 182.94099 l
361.853 185.14999 363.64401 186.94099 365.853 186.94099 c
h
369.853 152.664993 m
468.01599 152.664993 l
468.01599 178.94099 l
369.853 178.94099 l
369.853 152.664993 l
h
W
[114.162995 0 0 42.276 361.852994 144.664974] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc3_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc3_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc3_0 } {
0.5 sub 2 mul 0 add xpdfFunc3_1
} ifelse
}
def
0 1 0 axialSH
Q
q
365.853 247.72099 m
472.01599 247.72099 l
474.22501 247.72099 476.01599 245.92999 476.01599 243.72099 c
476.01599 208.91 l
476.01599 206.701 474.22501 204.91 472.01599 204.91 c
365.853 204.91 l
363.64398 204.91 361.853 206.701 361.853 208.91 c
361.853 243.72101 l
361.853 245.92999 363.64401 247.72099 365.853 247.72099 c
h
369.853 212.91 m
468.01599 212.91 l
468.01599 239.72101 l
369.853 239.72101 l
369.853 212.91 l
h
W
[114.162995 0 0 42.810991 361.852994 204.909993] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc4_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc4_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc4_0 } {
0.5 sub 2 mul 0 add xpdfFunc4_1
} ifelse
}
def
0 1 0 axialSH
Q
q
223.59801 135.255005 m
64.897003 135.255005 l
62.688004 135.255005 60.897003 137.046005 60.897003 139.255005 c
60.897003 141.464005 62.688004 143.255005 64.897003 143.255005 c
223.59801 143.255005 l
225.80701 143.255005 227.59801 141.464005 227.59801 139.255005 c
227.59801 137.046005 225.80701 135.255005 223.59801 135.255005 c
h
W
[166.701 0 0 8 60.897001 135.254993] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0.000002 def
/xMax 1 def
/yMax 1.000002 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc5_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc5_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc5_0 } {
0.5 sub 2 mul 0 add xpdfFunc5_1
} ifelse
}
def
0 1 0 axialSH
Q
q
223.59801 166.774994 m
64.897003 166.774994 l
62.688004 166.774994 60.897003 168.56599 60.897003 170.77499 c
60.897003 172.98399 62.688004 174.77499 64.897003 174.77499 c
223.59801 174.77499 l
225.80701 174.77499 227.59801 172.98399 227.59801 170.77499 c
227.59801 168.56599 225.80701 166.774994 223.59801 166.774994 c
h
W
[166.701 0 0 8 60.897001 166.774988] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0.000001 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc6_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc6_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc6_0 } {
0.5 sub 2 mul 0 add xpdfFunc6_1
} ifelse
}
def
0 1 0 axialSH
Q
q
156.479996 201.70799 m
156.479996 199.49899 154.688995 197.70799 152.479996 197.70799 c
64.897003 197.70799 l
62.688004 197.70799 60.897003 199.49899 60.897003 201.70799 c
60.897003 203.91699 62.688004 205.70799 64.897003 205.70799 c
152.480011 205.70799 l
154.688995 205.70799 156.479996 203.91701 156.479996 201.70799 c
h
W
[95.58299 0 0 8 60.897001 197.707977] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0.000002 def
/xMax 1 def
/yMax 1.000002 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc7_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc7_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc7_0 } {
0.5 sub 2 mul 0 add xpdfFunc7_1
} ifelse
}
def
0 1 0 axialSH
Q
q
223.59801 229.229 m
171.62401 229.229 l
169.41501 229.229 167.624008 231.02 167.624008 233.229 c
167.624008 235.438 169.41501 237.229 171.62401 237.229 c
223.59801 237.229 l
225.80701 237.229 227.59801 235.438 227.59801 233.229 c
227.59801 231.02 225.80701 229.229 223.59801 229.229 c
h
W
[59.973999 0 0 8 167.624008 229.229006] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0.000001 def
/xMax 1 def
/yMax 0.999999 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc8_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc8_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc8_0 } {
0.5 sub 2 mul 0 add xpdfFunc8_1
} ifelse
}
def
-0 1 0 axialSH
Q
q
223.59801 260.133 m
64.897003 260.133 l
62.688004 260.133 60.897003 261.92398 60.897003 264.133 c
60.897003 266.34201 62.688004 268.133 64.897003 268.133 c
223.59801 268.133 l
225.80701 268.133 227.59801 266.34201 227.59801 264.133 c
227.59801 261.92398 225.80701 260.133 223.59801 260.133 c
h
W
[166.701 0 0 8 60.897001 260.132983] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0.000002 def
/xMax 1 def
/yMax 1.000002 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc9_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc9_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc9_0 } {
0.5 sub 2 mul 0 add xpdfFunc9_1
} ifelse
}
def
0 1 0 axialSH
Q
q
92.817001 229.229 m
90.608002 229.229 88.817001 231.02 88.817001 233.229 c
88.817001 235.438 90.608002 237.229 92.817001 237.229 c
144.791 237.229 l
147 237.229 148.791 235.438 148.791 233.229 c
148.791 231.02 147 229.229 144.791 229.229 c
92.817001 229.229 l
h
W
[59.973999 0 0 8 88.817001 229.229006] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0.000001 def
/xMax 1 def
/yMax 0.999999 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc10_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc10_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc10_0 } {
0.5 sub 2 mul 0 add xpdfFunc10_1
} ifelse
}
def
0 1 0 axialSH
Q
q
192.41901 205.70799 m
194.62801 205.70799 196.41901 203.91699 196.41901 201.70799 c
196.41901 199.49899 194.62801 197.70799 192.41901 197.70799 c
164.505005 197.70799 l
162.296005 197.70799 160.505005 199.49899 160.505005 201.70799 c
160.505005 203.91699 162.296005 205.70799 164.505005 205.70799 c
192.41901 205.70799 l
h
W
[35.914001 0 0 8 160.505004 197.707977] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0.000002 def
/xMax 1 def
/yMax 1.000002 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc11_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc11_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc11_0 } {
0.5 sub 2 mul 0 add xpdfFunc11_1
} ifelse
}
def
0 1 0 axialSH
Q
q
479.13501 265.686 m
358.198 265.686 l
355.98898 265.686 354.198 267.47699 354.198 269.686 c
354.198 271.89502 355.98898 273.686 358.198 273.686 c
479.13501 273.686 l
481.34402 273.686 483.13501 271.89502 483.13501 269.686 c
483.13501 267.47699 481.34399 265.686 479.13501 265.686 c
h
W
[128.937011 0 0 8 354.197968 265.685999] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc12_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc12_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc12_0 } {
0.5 sub 2 mul 0 add xpdfFunc12_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
q
[52.248333 0 0 52.247845 3884.4099 111.050438] cm
q
2 40 m
2 8 l
5.6 8 l
9.799999 28 l
10.199999 28 l
14.399999 8 l
17.999998 8 l
17.999998 40 l
13.999998 40 l
13.999998 24 l
11.159998 40 l
8.759998 40 l
5.999998 24 l
5.999998 40 l
1.999998 40 l
2 40 l
h
24.5 40 m
24.5 23.200001 l
24.5 12.040001 24.5 7.64 30.5 7.64 c
36.5 7.64 36.5 12.040001 36.5 23.200001 c
36.5 40 l
32.5 40 l
32.5 30.799999 l
28.5 30.799999 l
28.5 40 l
24.5 40 l
h
28.5 27.6 m
32.5 27.6 l
32.5 23.200001 l
32.5 12.800001 32.5 10.840001 30.5 10.840001 c
28.5 10.840001 28.5 12.800001 28.5 23.200001 c
28.5 27.6 l
h
43 40 m
43 8 l
49.48 8 l
53.599998 8 55 10.520001 55 15.360001 c
55 19.720001 54.48 22.200001 53.240002 23.400002 c
53.240002 23.640001 l
54.280003 24.000002 54.600002 25.880001 55 30.560001 c
55.799999 40 l
51.799999 40 l
51.279999 30.560001 l
51 25.800001 50.279999 24.800001 49.079998 24.800001 c
47 24.800001 l
47 40 l
43 40 l
h
47 21.6 m
49.48 21.6 l
50.880001 21.6 51.279999 20.200001 51.279999 15.360001 c
51.279999 12.200001 50.68 11.200001 49.48 11.200001 c
47 11.200001 l
47 21.6 l
h
60.700001 30.24 m
64.739998 30.24 l
64.82 35.400002 65.220001 36.400002 66.659996 36.400002 c
68.619995 36.400002 68.619995 34.760002 68.619995 30.400002 c
68.619995 24.000002 60.699997 25.720001 60.699997 17.200001 c
60.699997 12.200001 60.699997 7.6 66.699997 7.6 c
71.139999 7.6 72.339996 10.120001 72.619995 16.16 c
68.619995 16.16 l
68.459991 11.799999 67.979996 10.799999 66.699997 10.799999 c
64.739998 10.799999 64.739998 12.959999 64.739998 17.199999 c
64.739998 23.399998 72.699997 21.199999 72.699997 30.399998 c
72.699997 35.999996 72.699997 40.399998 66.659996 40.399998 c
62.019997 40.399998 60.939995 37.639999 60.699997 30.239998 c
60.700001 30.24 l
h
78.400002 40 m
78.400002 8 l
82.400002 8 l
82.400002 21.6 l
86.400002 21.6 l
86.400002 8 l
90.400002 8 l
90.400002 40 l
86.400002 40 l
86.400002 24.799999 l
82.400002 24.799999 l
82.400002 40 l
78.400002 40 l
h
96.5 23.16 m
96.5 12 96.739998 7.599999 102.739998 7.599999 c
108.739998 7.599999 108.979996 12 108.979996 23.16 c
108.979996 35.959999 108.739998 40.400002 102.739998 40.400002 c
96.739998 40.400002 96.5 35.960003 96.5 23.160002 c
96.5 23.16 l
h
100.5 23.16 m
100.5 34.720001 100.5 36.400002 102.739998 36.400002 c
104.979996 36.400002 104.979996 34.720001 104.979996 23.160002 c
104.979996 12.760002 104.979996 10.800002 102.739998 10.800002 c
100.5 10.800002 100.5 12.760002 100.5 23.160002 c
100.5 23.16 l
h
W
[106.979999 0 0 32.800002 1.999999 7.599998] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc13_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc13_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc13_0 } {
0.5 sub 2 mul 0 add xpdfFunc13_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
q
[39.871861 0 0 39.871483 3856.5994 2430.6448] cm
q
6.06 16.959999 m
8.46 10.599999 l
7.86 8.259998 l
7.6 7.299998 8.940001 7.059999 9.16 7.899998 c
11.520001 16.579998 l
14.06 7.899998 l
14.320001 6.999998 15.64 7.379998 15.38 8.239998 c
12.280001 18.779999 l
12.160001 19.159998 11.820001 19.4 11.500001 19.4 c
11.140001 19.4 10.820001 19.18 10.700001 18.779999 c
9.06 12.759998 l
8.3 14.759998 7.500001 16.799999 6.76 18.799999 c
6.62 19.16 6.3 19.4 6 19.4 c
5.7 19.4 5.4 19.199999 5.26 18.76 c
2.08 8.24 l
1.82 7.38 3.04 7.1 3.3 7.86 c
6.06 16.959999 l
h
19.98 18.700001 m
19.98 8.06 l
19.98 7.6 20.34 7.360001 20.68 7.360001 c
25.280001 7.360001 l
25.720001 7.360001 25.940001 7.680001 25.940001 8.020001 c
25.940001 8.360001 25.720001 8.700001 25.280001 8.700001 c
21.32 8.700001 l
21.32 12.580001 l
24.459999 12.580001 l
24.919998 12.580001 25.139999 12.900001 25.139999 13.240001 c
25.139999 13.580001 24.9 13.940001 24.459999 13.940001 c
21.32 13.940001 l
21.32 18.08 l
25.279999 18.08 l
25.699999 18.08 25.919998 18.42 25.919998 18.74 c
25.919998 19.08 25.699999 19.4 25.279999 19.4 c
20.679998 19.4 l
20.339998 19.4 19.979998 19.279999 19.979998 18.699999 c
19.98 18.700001 l
h
30.5 18.719999 m
30.5 7.999999 l
30.5 7.679999 30.66 7.359999 31.1 7.359999 c
33.720001 7.359999 l
35.700001 7.359999 36.780003 8.079999 36.780003 10.079999 c
36.780003 10.879999 36.680004 11.659999 36.180004 12.199999 c
37.320004 12.999999 37.520004 14.379999 37.520004 15.779999 c
37.520004 18.239998 36.180004 19.399998 33.880005 19.399998 c
31.200005 19.399998 l
30.860004 19.399998 30.500004 19.279997 30.500004 18.719997 c
30.5 18.719999 l
h
31.84 18.08 m
33.580002 18.08 l
35.240002 18.08 36.160004 17.4 36.160004 15.78 c
36.160004 14.12 35.740005 13 34.120003 13 c
31.840002 13 l
31.840002 18.08 l
31.84 18.08 l
h
35.459999 10.08 m
35.459999 8.88 34.619999 8.7 33.719997 8.7 c
31.839998 8.7 l
31.839998 11.66 l
33.679996 11.66 l
34.939995 11.66 35.459995 11.3 35.459995 10.08 c
35.459999 10.08 l
h
49.540001 18.780001 m
49.540001 8.020001 l
49.540001 7.480001 49.920002 7.360001 50.200001 7.360001 c
53.400002 7.360001 l
56.040001 7.360001 57.34 8.620001 57.34 11.1 c
57.34 16.220001 l
57.34 17.780001 56.119999 19.420002 53.459999 19.420002 c
50.200001 19.420002 l
49.920002 19.420002 49.540001 19.260002 49.540001 18.780003 c
49.540001 18.780001 l
h
56.02 16.219999 m
56.02 11.099999 l
56.02 9.459999 55.139999 8.699999 53.400002 8.699999 c
50.860001 8.699999 l
50.860001 18.119999 l
53.459999 18.119999 l
54.68 18.119999 56.02 17.459999 56.02 16.219999 c
h
62.099998 18.700001 m
62.099998 8.06 l
62.099998 7.6 62.459999 7.360001 62.799999 7.360001 c
67.400002 7.360001 l
67.840004 7.360001 68.060005 7.680001 68.060005 8.020001 c
68.060005 8.360001 67.840004 8.700001 67.400002 8.700001 c
63.440002 8.700001 l
63.440002 12.580001 l
66.580002 12.580001 l
67.040001 12.580001 67.260002 12.900001 67.260002 13.240001 c
67.260002 13.580001 67.020004 13.940001 66.580002 13.940001 c
63.440002 13.940001 l
63.440002 18.08 l
67.400002 18.08 l
67.82 18.08 68.040001 18.42 68.040001 18.74 c
68.040001 19.08 67.82 19.4 67.400002 19.4 c
62.800003 19.4 l
62.460003 19.4 62.100002 19.279999 62.100002 18.699999 c
62.099998 18.700001 l
h
73.239998 7.8 m
75.860001 16.82 l
78.599998 7.84 l
78.860001 6.98 80.080002 7.32 79.839996 8.16 c
76.639999 18.84 l
76.540001 19.200001 76.220001 19.4 75.879997 19.4 c
75.539993 19.4 75.18 19.199999 75.079994 18.84 c
72.019997 8.18 l
71.759995 7.28 73.019997 7.02 73.239998 7.8 c
h
84.160004 18.700001 m
84.160004 8.06 l
84.160004 7.6 84.520004 7.360001 84.860001 7.360001 c
89.459999 7.360001 l
89.900002 7.360001 90.120003 7.680001 90.120003 8.020001 c
90.120003 8.360001 89.900002 8.700001 89.459999 8.700001 c
85.5 8.700001 l
85.5 12.580001 l
88.639999 12.580001 l
89.099998 12.580001 89.32 12.900001 89.32 13.240001 c
89.32 13.580001 89.080002 13.940001 88.639999 13.940001 c
85.5 13.940001 l
85.5 18.08 l
89.459999 18.08 l
89.879997 18.08 90.099998 18.42 90.099998 18.74 c
90.099998 19.08 89.879997 19.4 89.459999 19.4 c
84.860001 19.4 l
84.520004 19.4 84.160004 19.279999 84.160004 18.699999 c
84.160004 18.700001 l
h
94.720001 18.76 m
94.720001 8 l
94.720001 7.58 95.040001 7.36 95.360001 7.36 c
95.68 7.36 96.020004 7.58 96.020004 8 c
96.020004 18.060001 l
100.000008 18.060001 l
100.44001 18.060001 100.680008 18.400002 100.680008 18.740002 c
100.680008 19.080002 100.44001 19.400002 100.000008 19.400002 c
95.380005 19.400002 l
94.980003 19.400002 94.720001 19.080002 94.720001 18.760002 c
94.720001 18.76 l
h
104.440002 15.86 m
104.440002 10.9 l
104.440002 8.5 105.68 7.219999 108.080002 7.219999 c
108.599998 7.219999 l
110.979996 7.219999 112.239998 8.499999 112.239998 10.9 c
112.239998 15.86 l
112.239998 18.059999 110.779999 19.5 108.599998 19.5 c
108.080002 19.5 l
105.860001 19.5 104.440002 18.040001 104.440002 15.86 c
h
108.080002 18.16 m
108.599998 18.16 l
110.040001 18.16 110.900002 17.26 110.900002 15.86 c
110.900002 10.9 l
110.900002 9.34 110.139999 8.539999 108.599998 8.539999 c
108.080002 8.539999 l
106.560005 8.539999 105.720001 9.359999 105.720001 10.9 c
105.720001 15.86 l
105.720001 17.32 106.639999 18.16 108.080002 18.16 c
h
123.580002 10.28 m
123.580002 12.78 l
123.580002 15.16 122.340004 15.92 120.240005 15.92 c
118.380005 15.92 l
118.380005 18.76 l
118.380005 19.18 118.040009 19.4 117.720001 19.4 c
117.380005 19.4 117.059998 19.18 117.059998 18.76 c
117.059998 8.020001 l
117.059998 7.64 117.379997 7.360001 117.720001 7.360001 c
120.419998 7.360001 l
121.519997 7.360001 123.580002 7.58 123.580002 10.280001 c
123.580002 10.28 l
h
120.419998 8.7 m
118.379997 8.7 l
118.379997 14.56 l
120.239998 14.56 l
121.220001 14.56 122.279999 14.32 122.259995 12.759999 c
122.239998 10.279999 l
122.239998 9.799999 122.159996 8.699999 120.419998 8.699999 c
120.419998 8.7 l
h
127.68 18.700001 m
127.68 8.06 l
127.68 7.6 128.039993 7.360001 128.380005 7.360001 c
132.980011 7.360001 l
133.420013 7.360001 133.640015 7.680001 133.640015 8.020001 c
133.640015 8.360001 133.420013 8.700001 132.980011 8.700001 c
129.020004 8.700001 l
129.020004 12.580001 l
132.160004 12.580001 l
132.62001 12.580001 132.839996 12.900001 132.839996 13.240001 c
132.839996 13.580001 132.599991 13.940001 132.160004 13.940001 c
129.020004 13.940001 l
129.020004 18.08 l
132.980011 18.08 l
133.400009 18.08 133.62001 18.42 133.62001 18.74 c
133.62001 19.08 133.400009 19.4 132.980011 19.4 c
128.380005 19.4 l
128.040009 19.4 127.680008 19.279999 127.680008 18.699999 c
127.68 18.700001 l
h
139.580002 15.9 m
139.580002 18.76 l
139.580002 19.200001 139.240005 19.4 138.919998 19.4 c
138.580002 19.4 138.259995 19.199999 138.259995 18.76 c
138.259995 8.020001 l
138.259995 7.62 138.479996 7.360001 138.919998 7.360001 c
141.619995 7.360001 l
142.37999 7.360001 144.779999 7.58 144.779999 10.280001 c
144.779999 12.780001 l
144.779999 14.300001 144.220001 15.26 142.940002 15.68 c
144.300003 18.42 l
144.580002 18.960001 144.160004 19.4 143.720001 19.4 c
143.479996 19.4 143.180008 19.24 143.020004 18.9 c
141.559998 15.9 l
139.580002 15.9 l
h
143.460007 12.78 m
143.460007 10.28 l
143.460007 9.799999 143.280014 8.7 141.62001 8.7 c
139.580017 8.7 l
139.580017 14.56 l
141.440018 14.56 l
142.420013 14.56 143.460022 14.339999 143.460022 12.78 c
143.460007 12.78 l
h
W
[142.73612 0 0 12.280001 2.04388 7.22] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.001568 def
/yMin -0.019544 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc14_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc14_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc14_0 } {
0.5 sub 2 mul 0 add xpdfFunc14_1
} ifelse
}
def
-0.001568 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
